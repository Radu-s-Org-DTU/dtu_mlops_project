name: Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: ["ubuntu-latest", "macos-latest"]
        python-version: ["3.12", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -r requirements.txt
          pip list

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

      - name: Export WandB Environment Variables
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
          WANDB_PROJECT: ${{ secrets.WANDB_PROJECT }}
          WANDB_ENTITY: ${{ secrets.WANDB_ENTITY }}
          WANDB_REGISTRY: ${{ secrets.WANDB_REGISTRY }}
          WANDB_MODEL_NAME: ${{ secrets.WANDB_MODEL_NAME }}
        run: |
          echo "WANDB_API_KEY=$WANDB_API_KEY" >> $GITHUB_ENV
          echo "WANDB_PROJECT=$WANDB_PROJECT" >> $GITHUB_ENV
          echo "WANDB_ENTITY=$WANDB_ENTITY" >> $GITHUB_ENV
          echo "WANDB_REGISTRY=$WANDB_REGISTRY" >> $GITHUB_ENV
          echo "WANDB_MODEL_NAME=$WANDB_MODEL_NAME" >> $GITHUB_ENV

      - name: Run Ruff
        run: |
          ruff check . --no-cache

      - name: Run tests & coverage
        run: |
          coverage run -m pytest tests/
          coverage report -m

      - name: Save Test Results and Coverage
        run: |
          mkdir -p artifacts
          coverage xml -o artifacts/coverage.xml
          pytest --junitxml=artifacts/test-results.xml
        continue-on-error: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-results-and-coverage
          path: |
            artifacts/
            !**/*.ckpt

      - name: Comment test summary on PR
        if: ${{ github.event_name == 'pull_request' && matrix.operating-system == 'ubuntu-latest' && matrix.python-version == '3.11' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const testResultsXml = fs.readFileSync('artifacts/test-results.xml', 'utf-8');
            const passedMatch = testResultsXml.match(/tests="(\d+)"/);
            const failedMatch = testResultsXml.match(/failures="(\d+)"/);
            const passed = passedMatch ? parseInt(passedMatch[1], 10) : 0;
            const failed = failedMatch ? parseInt(failedMatch[1], 10) : 0;

            const coverageXml = fs.readFileSync('artifacts/coverage.xml', 'utf-8');
            const coverageMatch = coverageXml.match(/line-rate="([\d.]+)"/);
            const coverage = coverageMatch ? (parseFloat(coverageMatch[1]) * 100).toFixed(2) : '0.00';

            const commentBody = `
            ### Test Summary
            - **Passed Tests**: ${passed}
            - **Failed Tests**: ${failed}
            - **Coverage**: ${coverage}%
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
